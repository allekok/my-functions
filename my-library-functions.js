const my_library_functions = [
	'$(str)',
	'add_matrices(A, B)',
	'apply_predicate_to_matrix_elements(false_p, A)',
	'apply_proc_to_matrix_elements(proc, A)',
	'apply_proc_to_same_elements_of_matrices(proc, A, B)',
	'base_n_to_decimal(x, n)',
	'binary_to_decimal(bin)',
	'binary_to_hexadecimal(bin)',
	'binary_to_octal(bin)',
	'character_to_decimal(char)',
	'decimal_to_base_n(num, n)',
	'decimal_to_bcd(num, num_of_bits=8)',
	'decimal_to_binary(num)',
	'decimal_to_character(num)',
	'decimal_to_hexadecimal(num)',
	'decimal_to_octal(num)',
	'decimal_to_packed_bcd(num)',
	'extend_left_by_character_n_times(str, char, n)',
	'hexadecimal_to_binary(hex)',
	'hexadecimal_to_decimal(hex)',
	'hexadecimal_to_octal(hex)',
	'identity_matrix(rows, columns)',
	'is_matrix(A)',
	'is_matrix_bottom_triangular(A)',
	'is_matrix_diagonal(A)',
	'is_matrix_identity(A)',
	'is_matrix_square(A)',
	'is_matrix_top_triangular(A)',
	'is_matrix_zero(A)',
	'matrix_anti_diagonal(A)',
	'matrix_main_diagonal(A)',
	'matrix_to_string(A)',
	'matrix_transposition(A)',
	'multiply_matrices(A, B)',
	'multiply_matrix(A, x)',
	'multiply_matrix_by_scalar(A, n)',
	'octal_to_binary(octal)',
	'octal_to_decimal(octal)',
	'octal_to_hexadecimal(octal)',
	'parallel_resistors_equivalent(resistors)',
	'reverse_string(str)',
	'series_resistors_equivalent(resistors)',
	'subtract_matrices(A, B)',
	'sum(f, numbers)',
	'zero_matrix(rows, columns)',
]
